#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "esp_camera.h"
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include "SparkFunBME280.h"
 
const char* ServerName = "esp32cam"; 
 
String local_hwaddr; 
String local_swaddr; 
const char* ssid = "iPhone";
const char* password = "00000000";
String chatId = "5199233069"; 
String BOTtoken = "6508193890:AAEJpWjFE5HcoIng7UbXkeMBMbfGaEL_cNM";
 
bool sendPhoto = false;
 
WiFiClientSecure clientTCP;
 
UniversalTelegramBot bot(BOTtoken, clientTCP);
 

#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27
 
#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22
 
#define SENSOR_LED 12 
#define FLASH_LED_PIN 4 
#define MOTION_SENSOR 13 
 
bool FlashState = false;
bool MotionDetected = false;
bool MotionState = false;
 

#define I2C_SDA 14
#define I2C_SCL 15

BME280 bme;
 
int botRequestDelay = 1000; 
long lastTimeBotRan; 
 
void handleNewMessages(int numNewMessages);
String sendPhotoTelegram();
 
float temperatureC;
float temperatureF;
float humidity;
String getReadings() {
float temperatureC, temperatureF, humidity;
temperatureC = bme.readTempC();
temperatureF = bme.readTempF();
humidity = bme.readFloatHumidity();
String message = "Temperature: " + String(temperatureF) + " ºF\n";
message += "Humidity: " + String (humidity) + " % \n";
long rssi = WiFi.RSSI() + 100;
message += "Signal Strength: " + String(rssi) + "\n";
return message;
}
 

 
void setup() {
WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
Serial.begin(115200);
delay(500);
 
pinMode(MOTION_SENSOR, INPUT); 
 
pinMode(SENSOR_LED, OUTPUT); 
digitalWrite(SENSOR_LED, LOW);
 
pinMode(FLASH_LED_PIN, OUTPUT);
digitalWrite(FLASH_LED_PIN, LOW);
 

Wire.begin(I2C_SDA, I2C_SCL);
bme.settings.commInterface = I2C_MODE;
bme.settings.I2CAddress = 0x76;
bme.settings.runMode = 3;
bme.settings.tStandby = 0;
bme.settings.filter = 0;
bme.settings.tempOverSample = 1;
bme.settings.pressOverSample = 1;
bme.settings.humidOverSample = 1;
bme.begin();
 
delay(500);
Serial.println("\nESP Cam using Telegram Bot");
String readings = getReadings();
Serial.print(readings);
 
WiFi.mode(WIFI_STA);
Serial.println();
Serial.print("Connecting to ");
Serial.println(ssid);
WiFi.begin(ssid, password);
 

clientTCP.setCACert(TELEGRAM_CERTIFICATE_ROOT);
 
while (WiFi.status() != WL_CONNECTED) {
Serial.print(".");
delay(500);
}
Serial.println(" >> CONNECTED");
 
Serial.print("ESP32-CAM IP Address: ");
Serial.println(WiFi.localIP());
 

long rssi = WiFi.RSSI() + 100;
Serial.print("Signal Strength = " + String(rssi));
if (rssi > 50) {
Serial.println(F(" (>50 – Good)"));
} else {
Serial.println(F(" (Could be Better)"));
}

 
Serial.printf("Digite /Start para iniciar o Bot no Telegram\r\n");
 
}
 
void loop() {
if (sendPhoto) {
 
Serial.println("Preparing photo");
sendPhotoTelegram();
sendPhoto = false;
 
}
 
 
MotionDetected = digitalRead(MOTION_SENSOR);
if (MotionDetected) {
digitalWrite(SENSOR_LED, LOW);
 
if (MotionState) {
digitalWrite(SENSOR_LED, HIGH); 
bot.sendMessage(chatId, "Movimento detectado!", "");
Serial.println("Movimento detectado!");
sendPhotoTelegram();
MotionDetected = false;
} else {
delay(2000); 
}
 
}
 
if (millis() > lastTimeBotRan + botRequestDelay) {
int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
while (numNewMessages) {
Serial.print("Message received : ");
handleNewMessages(numNewMessages);
numNewMessages = bot.getUpdates(bot.last_message_received + 1);
}
lastTimeBotRan = millis();
}
}
 
String sendPhotoTelegram() {
const char* myDomain = "api.telegram.org";
String getAll = "";
String getBody = "";
 
camera_fb_t * fb = NULL;
 
if (FlashState == true) digitalWrite(FLASH_LED_PIN, HIGH); 
 
delay(10);
 
fb = esp_camera_fb_get();
 
digitalWrite(FLASH_LED_PIN, LOW); 
 
if (!fb) {
Serial.println("Camera capture failed");
delay(1000);
ESP.restart();
return "Camera capture failed";
}
 
Serial.println("Connect to " + String(myDomain));
 
if (clientTCP.connect(myDomain, 443)) {
Serial.println("Connection successful");
 
String head = "--RandomNerdTutorials\r\nContent-Disposition: form-data; name=\"chat_id\"; \r\n\r\n" + chatId + "\r\n--RandomNerdTutorials\r\nContent-Disposition: form-data; name=\"photo\"; filename=\"esp32-cam.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n";
String tail = "\r\n--RandomNerdTutorials--\r\n";
 
uint16_t imageLen = fb->len;
uint16_t extraLen = head.length() + tail.length();
uint16_t totalLen = imageLen + extraLen;
 
clientTCP.println("POST /bot" + BOTtoken + "/sendPhoto HTTP/1.1");
clientTCP.println("Host: " + String(myDomain));
clientTCP.println("Content-Length: " + String(totalLen));
clientTCP.println("Content-Type: multipart/form-data; boundary=RandomNerdTutorials");
clientTCP.println();
clientTCP.print(head);
 
uint8_t *fbBuf = fb->buf;
size_t fbLen = fb->len;
for (size_t n = 0; n < fbLen; n = n + 1024) {
if (n + 1024 < fbLen) {
clientTCP.write(fbBuf, 1024);
fbBuf += 1024;
}
else if
(fbLen % 1024 > 0) {
size_t remainder = fbLen % 1024;
clientTCP.write(fbBuf, remainder);
}
}
 
clientTCP.print(tail);
 
esp_camera_fb_return(fb);
 
int waitTime = 10000; 
long startTimer = millis();
boolean state = false;
 
while ((startTimer + waitTime) > millis()) {
Serial.print(".");
delay(100);
while (clientTCP.available()) {
char c = clientTCP.read();
if (c == '\n') {
if (getAll.length() == 0) state = true;
getAll = "";
}
else if (c != '\r') {
getAll += String(c);
}
if (state == true) {
getBody += String(c);
}
startTimer = millis();
}
if (getBody.length() > 0) break;
}
clientTCP.stop();
 

Serial.println("Photo Sent");
}
else {
getBody = "Connected to api.telegram.org failed.";
Serial.println("Connected to api.telegram.org failed.");
}
return getBody;
}
 
void handleNewMessages(int numNewMessages) {
 
for (int i = 0; i < numNewMessages; i++) {

String chat_id = String(bot.messages[i].chat_id);
if (chat_id != chatId) {
bot.sendMessage(chat_id, "Unauthorized user", "");
continue;
}
 

String fromName = bot.messages[i].from_name;
String text = bot.messages[i].text;
 
Serial.println(numNewMessages + " From " + fromName + " >" + text + " request");
 
if (text == "/Flash") {
FlashState = !FlashState;
String welcome = "Status flash.\n";
Serial.print("FlashState = ");
if (FlashState == true) welcome += "Flash : ON now\n"; else welcome += "Flash : OFF now\n";
if (FlashState == true) Serial.println("ON"); else Serial.println("OFF");
bot.sendMessage(chatId, welcome, "Markdown");

}
if (text == "/Motion") {
MotionState = !MotionState;
String welcome = "Status sensor.\n";
Serial.print("MotionState = ");
if (MotionState == true) Serial.println("ON"); else Serial.println("OFF");
if (MotionState == true) welcome += "Motion : ON now\n"; else welcome += "Motion : OFF now\n";
bot.sendMessage(chatId, welcome, "Markdown");

}
 
if (text == "/Photo") {
sendPhoto = true;
}
if (text == "/Readings") {
String readings = getReadings();
bot.sendMessage(chatId, readings, "");
}
if (text == "/Start") {
String welcome = "Sua segurança garantida com o ESP32-cam + sensor PIR";
long rssi = WiFi.RSSI() + 100;
welcome += "Sinal Wi-Fi: -" + String(rssi) + "\n";
welcome += "/Photo : Tirar nova foto\n";
welcome += "/Flash : Habilita flash na foto\n";
welcome += "/Motion : Habilita ou nao a detectao de movimento\n";
if (FlashState == true) welcome += "Flash : ON now\n"; else welcome += "Flash : OFF now\n";
welcome += "Motion : Alterar sensor de movimento\n";
welcome += "Habilitando o sensor voce recebera uma msg ao detectar movimento!.\n";
bot.sendMessage(chatId, welcome, "Markdown");
}
}
}
